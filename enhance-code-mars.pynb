#same action as (app.py) 
import urllib.request
from PIL import Image
import numpy as np
from PIL import Image
from scipy import ndimage
import skimage.io
from skimage import exposure
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("ignore")
from skimage.metrics import peak_signal_noise_ratio as compare_psnr
from skimage.metrics import structural_similarity as compare_ssim
import urllib.request
from PIL import Image
import urllib.request


def is_grayscale(image):
    return image.mode == 'L'
from PIL import Image
import urllib.request
def is_grayscale(image):
 #   return image.mode == 'L
  print ("hello")

url=input("What is your link? ")

def enhance (image):
  #url
  urllib.request.urlretrieve(
  url,
  "PIA08809_modest.jpg")

  # Load the image using skimage
  img = skimage.io.imread("PIA08809_modest.jpg")

  # Enhance contrast using Histogram Equalization
  img_equalized = exposure.equalize_hist(img)

  # Enhance contrast using Histogram Equalization
  img_equalized = exposure.equalize_hist(img)

  # Enhance contrast using Adaptive Equalization
  img_adapteq = exposure.equalize_adapthist(img, clip_limit=0.03)

  # Enhance sharpness using Unsharp Masking
  img_unsharp = skimage.filters.unsharp_mask(img, radius=3, amount=2)


  # Convert data type to uint8 for better compatibility
  img_equalized = (img_equalized * 255).astype(np.uint64)
  img_adapteq = (img_adapteq * 255).astype(np.uint64)
  img_unsharp = (img_unsharp * 255).astype(np.uint64)
  #
  img_clahe = exposure.equalize_adapthist(img, clip_limit=0.03) # You can adjust clip_limit

  # Create subplots for better visualization
  fig, axes = plt.subplots(nrows=3, ncols=3, figsize=(10, 8))

  # Display the images with titles
  axes[0, 0].imshow(img)
  axes[0, 0].set_title("Original Image")
  axes[0, 1].imshow(img_equalized)
  axes[0, 1].set_title("Histogram Equalized")
  axes[1, 0].imshow(img_adapteq)
  axes[1, 0].set_title("Adaptive Equalized")
  axes[1, 1].imshow(img_unsharp)
  axes[1, 1].set_title("Unsharp Masked")
  #axes[1, 2].imshow(img_clahe)
  #axes[1, 2].set_title("CLAHE Method")


  # Turn off axis ticks for cleaner presentation
  for ax in axes.flat:
      ax.axis('off')

  # Adjust spacing between subplots
  plt.tight_layout()

  # Show the plot
  plt.show()




  #plt.hist(img.ravel(), bins=256, range=(0.0, 1.0), fc='k', ec='k')  # Calculating histogram (calculates intensity of the image)
  #plt.show()
  # Calculate PSNR and SSIM for each enhanced image
  # Calculate PSNR and SSIM for each enhanced image
  psnr_O = compare_psnr(img, img)
  ssim_O = compare_ssim(img, img, multichannel=True, win_size=3) # Changed win_size to 3

  psnr_equalized = compare_psnr(img, img_equalized)
  ssim_equalized = compare_ssim(img, img_equalized, multichannel=True, win_size=3) # Changed win_size to 3

  psnr_adapteq = compare_psnr(img, img_adapteq)
  ssim_adapteq = compare_ssim(img, img_adapteq, multichannel=True, win_size=3) # Changed win_size to 3

  psnr_unsharp = compare_psnr(img, img_unsharp)
  ssim_unsharp = compare_ssim(img, img_unsharp, multichannel=True, win_size=3) # Changed win_size to 3

  #psnr_CLAHE = compare_psnr(img, img_clahe)
  #ssim_CLAHE = compare_ssim(img, img_clahe, multichannel=True, win_size=3,data_range=img_clahe.max() - img_clahe.min()) # Changed win_size to 3



  # Print the results
  print(f"Original Equalization: PSNR = {psnr_O:.2f}, SSIM = {ssim_O:.4f}")
  print(f"Histogram Equalization: PSNR = {psnr_equalized:.2f}, SSIM = {ssim_equalized:.4f}")
  print(f"Adaptive Equalization: PSNR = {psnr_adapteq:.2f}, SSIM = {ssim_adapteq:.4f}")
  print(f"Unsharp Masking: PSNR = {psnr_unsharp:.2f}, SSIM = {ssim_unsharp:.4f}")
  #print(f"CLAHE: PSNR = {psnr_CLAHE:.2f}, SSIM = {ssim_CLAHE:.4f}")


image = url
enhance(image)
